{"ast":null,"code":"// This script is released to the public domain and may be used, modified and\n// distributed without restrictions. Attribution not necessary but appreciated.\n// Source: https://weeknumber.net/how-to/javascript\n// Returns the ISO week of the date.\nDate.prototype.getWeek = function () {\n  var date = new Date(this.getTime());\n  date.setHours(0, 0, 0, 0); // Thursday in current week decides the year.\n\n  date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7); // January 4 is always in week 1.\n\n  var week1 = new Date(date.getFullYear(), 0, 4); // Adjust to Thursday in week 1 and count number of weeks from date to week1.\n\n  return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);\n}; // Returns the four-digit year corresponding to the ISO week of the date.\n\n\nDate.prototype.getWeekYear = function () {\n  var date = new Date(this.getTime());\n  date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);\n  return date.getFullYear();\n}; //Returns true if date 1 is the same week as date 2\n\n\nfunction findWeek(date1, date2) {\n  let date_1 = new Date(date1);\n  let date_2 = new Date(date2);\n\n  if (date_1.getWeek() === date_2.getWeek()) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = findWeek;","map":{"version":3,"sources":["C:\\Users\\haydo\\Desktop\\React Apps\\crewboard\\client\\src\\scripts\\findWeek.js"],"names":["Date","prototype","getWeek","date","getTime","setHours","setDate","getDate","getDay","week1","getFullYear","Math","round","getWeekYear","findWeek","date1","date2","date_1","date_2","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;AACAA,IAAI,CAACC,SAAL,CAAeC,OAAf,GAAyB,YAAW;AAChC,MAAIC,IAAI,GAAG,IAAIH,IAAJ,CAAS,KAAKI,OAAL,EAAT,CAAX;AACAD,EAAAA,IAAI,CAACE,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAFgC,CAGhC;;AACAF,EAAAA,IAAI,CAACG,OAAL,CAAaH,IAAI,CAACI,OAAL,KAAiB,CAAjB,GAAqB,CAACJ,IAAI,CAACK,MAAL,KAAgB,CAAjB,IAAsB,CAAxD,EAJgC,CAKhC;;AACA,MAAIC,KAAK,GAAG,IAAIT,IAAJ,CAASG,IAAI,CAACO,WAAL,EAAT,EAA6B,CAA7B,EAAgC,CAAhC,CAAZ,CANgC,CAOhC;;AACA,SAAO,IAAIC,IAAI,CAACC,KAAL,CAAW,CAAC,CAACT,IAAI,CAACC,OAAL,KAAiBK,KAAK,CAACL,OAAN,EAAlB,IAAqC,QAArC,GACC,CADD,GACK,CAACK,KAAK,CAACD,MAAN,KAAiB,CAAlB,IAAuB,CAD7B,IACkC,CAD7C,CAAX;AAED,CAVH,C,CAYE;;;AACAR,IAAI,CAACC,SAAL,CAAeY,WAAf,GAA6B,YAAW;AACtC,MAAIV,IAAI,GAAG,IAAIH,IAAJ,CAAS,KAAKI,OAAL,EAAT,CAAX;AACAD,EAAAA,IAAI,CAACG,OAAL,CAAaH,IAAI,CAACI,OAAL,KAAiB,CAAjB,GAAqB,CAACJ,IAAI,CAACK,MAAL,KAAgB,CAAjB,IAAsB,CAAxD;AACA,SAAOL,IAAI,CAACO,WAAL,EAAP;AACD,CAJD,C,CAOF;;;AAEA,SAASI,QAAT,CAAkBC,KAAlB,EAAwBC,KAAxB,EAA+B;AAC3B,MAAIC,MAAM,GAAG,IAAIjB,IAAJ,CAASe,KAAT,CAAb;AACA,MAAIG,MAAM,GAAG,IAAIlB,IAAJ,CAASgB,KAAT,CAAb;;AAEA,MAAGC,MAAM,CAACf,OAAP,OAAqBgB,MAAM,CAAChB,OAAP,EAAxB,EAAyC;AACrC,WAAO,IAAP;AACH,GAFD,MAGK;AACD,WAAO,KAAP;AACH;AAEJ;;AAEDiB,MAAM,CAACC,OAAP,GAAiBN,QAAjB","sourcesContent":["// This script is released to the public domain and may be used, modified and\r\n// distributed without restrictions. Attribution not necessary but appreciated.\r\n// Source: https://weeknumber.net/how-to/javascript\r\n\r\n// Returns the ISO week of the date.\r\nDate.prototype.getWeek = function() {\r\n    var date = new Date(this.getTime());\r\n    date.setHours(0, 0, 0, 0);\r\n    // Thursday in current week decides the year.\r\n    date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);\r\n    // January 4 is always in week 1.\r\n    var week1 = new Date(date.getFullYear(), 0, 4);\r\n    // Adjust to Thursday in week 1 and count number of weeks from date to week1.\r\n    return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000\r\n                          - 3 + (week1.getDay() + 6) % 7) / 7);\r\n  }\r\n  \r\n  // Returns the four-digit year corresponding to the ISO week of the date.\r\n  Date.prototype.getWeekYear = function() {\r\n    var date = new Date(this.getTime());\r\n    date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);\r\n    return date.getFullYear();\r\n  }\r\n\r\n\r\n//Returns true if date 1 is the same week as date 2\r\n\r\nfunction findWeek(date1,date2) {\r\n    let date_1 = new Date(date1)\r\n    let date_2 = new Date(date2)\r\n\r\n    if(date_1.getWeek() === date_2.getWeek()){\r\n        return true\r\n    }\r\n    else {\r\n        return false\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = findWeek\r\n"]},"metadata":{},"sourceType":"module"}