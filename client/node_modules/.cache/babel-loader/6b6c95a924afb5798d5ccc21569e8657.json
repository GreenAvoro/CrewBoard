{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\haydo\\\\Desktop\\\\React Apps\\\\crewboard\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\haydo\\\\Desktop\\\\React Apps\\\\crewboard\\\\client\\\\src\\\\components\\\\CrewMaker.js\";\nimport React, { useState, useEffect } from 'react';\nimport MemberList from './MemberList';\nimport CrewList from './CrewList';\n\nfunction CrewMaker(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        memberList = _useState2[0],\n        updateMemberList = _useState2[1];\n\n  const _useState3 = useState([{\n    name: \"David James\",\n    class: 1\n  }, {\n    name: \"Steven Mayo Smith\",\n    class: 1\n  }, {\n    name: \"Sweetmans\",\n    class: 4\n  }, {\n    name: \"Richard Dykes\",\n    class: 2\n  }, {\n    name: \"Drury\",\n    class: 4\n  }, {\n    name: \"Kelsey Bevan\",\n    class: 2\n  }, {\n    name: \"Noel Playle II\",\n    class: 8\n  }, {\n    name: \"Millet Moore\",\n    class: 8\n  }]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        boatList = _useState4[0],\n        updateBoatList = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        selected = _useState6[0],\n        updateSelected = _useState6[1];\n\n  const _useState7 = useState({}),\n        _useState8 = _slicedToArray(_useState7, 2),\n        boatSelected = _useState8[0],\n        updateBoatSelected = _useState8[1];\n\n  const _useState9 = useState([{\n    id: 1,\n    members: [],\n    boat: {}\n  }, {\n    id: 2,\n    members: [],\n    boat: {}\n  }]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        crews = _useState10[0],\n        updateCrews = _useState10[1]; //Fetch Members of selected squad\n\n\n  useEffect(() => {\n    fetch(\"/api/member?squad=\".concat(props.squad)).then(res => res.json()).then(data => {\n      data = data.map(member => \"\".concat(member.firstName, \" \").concat(member.lastName.substring(0, 1)));\n      updateMemberList(data);\n    });\n  }, []);\n\n  function boatSelect(boat) {\n    boatSelected === boat ? updateBoatSelected({}) : updateBoatSelected(boat);\n  }\n\n  function handleSelect(member_name) {\n    if (!selected.includes(member_name)) {\n      updateSelected(prevState => [...prevState, member_name]);\n    } else {\n      updateSelected(prevState => prevState.filter(item => {\n        return item !== member_name;\n      }));\n    }\n  }\n\n  function addMembers(crew_id) {\n    //Attempt adding selected to crews\n    const my_crews = crews.map(item => item);\n\n    if (crew_id !== \"memList\") {\n      my_crews.forEach(crew => {\n        if (crew.id === crew_id) {\n          selected.forEach(name => {\n            if (!crew.members.includes(name)) {\n              crew.members.push(name);\n            }\n          });\n\n          if (Object.getOwnPropertyNames(crew.boat).length === 0) {\n            crew.boat = boatSelected; //Get boat out of boatlist\n\n            if (crew_id !== \"memList\") {\n              updateBoatList(prevState => prevState.filter(boat => {\n                return boat !== boatSelected;\n              }));\n            } //Get selected boat out of other crews\n\n\n            my_crews.forEach(crew => {\n              if (crew.id !== crew_id) {\n                if (crew.boat.name === boatSelected.name) {\n                  crew.boat = {};\n                }\n              }\n            });\n            updateBoatSelected({});\n          }\n        }\n      });\n    } else {\n      //Add memebers back to member list\n      const newMemList = memberList.map(item => item);\n      selected.forEach(mem => {\n        if (!newMemList.includes(mem)) {\n          newMemList.push(mem);\n        }\n      });\n      updateMemberList(newMemList);\n\n      if (Object.getOwnPropertyNames(boatSelected).length !== 0) {\n        if (!boatList.includes(boatSelected)) {\n          const newBoatList = boatList.map(boat => boat);\n          newBoatList.push(boatSelected);\n          updateBoatList(newBoatList);\n          my_crews.forEach(crew => {\n            if (crew.id !== crew_id) {\n              if (crew.boat.name === boatSelected.name) {\n                crew.boat = {};\n              }\n            }\n          });\n          updateBoatSelected({});\n        }\n      }\n    } //Get selected out of memberlist\n\n\n    selected.forEach(item => {\n      if (crew_id !== \"memList\") {\n        updateMemberList(prevState => prevState.filter(member => {\n          return member !== item;\n        }));\n      } //Get selected out of crewlist by checking every crew list except the one you're\n      //trying to add to\n\n\n      my_crews.forEach(crew => {\n        if (crew.id !== crew_id) {\n          var new_crew = [];\n          crew.members.forEach((member, i) => {\n            if (!selected.includes(member)) {\n              new_crew.push(member);\n            }\n          });\n          crew.members = new_crew;\n        }\n      });\n    }); //Add selected to given crew\n\n    updateCrews(my_crews);\n    updateSelected([]);\n  }\n\n  function addCrew() {\n    const my_crews = crews.map(item => item);\n    my_crews.push({\n      id: my_crews.length + 1,\n      members: [],\n      boat: {}\n    });\n    updateCrews(my_crews);\n  }\n\n  function saveCrews() {\n    const data_to_send = {\n      training_id: props.training.id,\n      crew: crews\n    };\n    console.log(data_to_send);\n    fetch('/api/training/addcrews', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data_to_send)\n    }).then(res => res.json()).then(data => console.log(data));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"content-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(MemberList, {\n    boats: boatList,\n    members: memberList,\n    memberclick: handleSelect,\n    selected: selected,\n    boatselected: boatSelected,\n    listclick: addMembers,\n    boatclick: boatSelect,\n    savecrews: saveCrews,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }), React.createElement(CrewList, {\n    crews: crews,\n    callback: addMembers,\n    memberclick: handleSelect,\n    selected: selected,\n    boatselected: boatSelected,\n    addcrew: addCrew,\n    boatclick: boatSelect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }));\n}\n\nexport default CrewMaker;","map":{"version":3,"sources":["C:\\Users\\haydo\\Desktop\\React Apps\\crewboard\\client\\src\\components\\CrewMaker.js"],"names":["React","useState","useEffect","MemberList","CrewList","CrewMaker","props","memberList","updateMemberList","name","class","boatList","updateBoatList","selected","updateSelected","boatSelected","updateBoatSelected","id","members","boat","crews","updateCrews","fetch","squad","then","res","json","data","map","member","firstName","lastName","substring","boatSelect","handleSelect","member_name","includes","prevState","filter","item","addMembers","crew_id","my_crews","forEach","crew","push","Object","getOwnPropertyNames","length","newMemList","mem","newBoatList","new_crew","i","addCrew","saveCrews","data_to_send","training_id","training","console","log","method","headers","body","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport MemberList from './MemberList'\r\nimport CrewList from './CrewList'\r\n\r\nfunction CrewMaker(props) {\r\n    const [memberList, updateMemberList] = useState([])\r\n    const [ boatList, updateBoatList ] = useState([\r\n        {name: \"David James\",class: 1},\r\n        {name: \"Steven Mayo Smith\",class: 1},\r\n        {name: \"Sweetmans\", class: 4},\r\n        {name: \"Richard Dykes\", class: 2},\r\n        {name: \"Drury\", class: 4},\r\n        {name: \"Kelsey Bevan\", class: 2},\r\n        {name: \"Noel Playle II\",class:  8},\r\n        {name: \"Millet Moore\", class: 8}\r\n    ])\r\n    const [selected, updateSelected] = useState([])\r\n    const [boatSelected, updateBoatSelected] = useState({})\r\n    const [crews, updateCrews] = useState([\r\n        { id: 1, members: [], boat: {}},\r\n        { id: 2, members: [], boat: {} }\r\n    ])\r\n\r\n    //Fetch Members of selected squad\r\n    useEffect(() => {\r\n        fetch(`/api/member?squad=${props.squad}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                data = data.map(member => `${member.firstName} ${member.lastName.substring(0,1)}`)\r\n                updateMemberList(data)\r\n            })\r\n    }, [])\r\n\r\n    function boatSelect(boat){\r\n        boatSelected === boat ? \r\n            updateBoatSelected({}):\r\n            updateBoatSelected(boat)\r\n    }\r\n\r\n\r\n\r\n    function handleSelect(member_name) {\r\n        if (!selected.includes(member_name)) {\r\n            updateSelected(prevState => [...prevState, member_name])\r\n        } else {\r\n            updateSelected(prevState => prevState.filter(item => {\r\n                return item !== member_name\r\n            }))\r\n        }\r\n    }\r\n\r\n\r\n    function addMembers(crew_id) {\r\n        //Attempt adding selected to crews\r\n        const my_crews = crews.map(item => item)\r\n        if (crew_id !== \"memList\") {\r\n            my_crews.forEach(crew => {\r\n                if (crew.id === crew_id) {\r\n                    selected.forEach(name => {\r\n                        if (!crew.members.includes(name)) {\r\n                            crew.members.push(name)\r\n                        }\r\n                    })\r\n                    if(Object.getOwnPropertyNames(crew.boat).length === 0){\r\n\r\n                        crew.boat = boatSelected\r\n                        //Get boat out of boatlist\r\n                        if (crew_id !== \"memList\") {\r\n                            updateBoatList(prevState => prevState.filter(boat => {\r\n                                return boat !== boatSelected\r\n                            }))\r\n                        }\r\n                        //Get selected boat out of other crews\r\n                        my_crews.forEach(crew => {\r\n                            if(crew.id !== crew_id){\r\n                                if(crew.boat.name === boatSelected.name){\r\n                                    crew.boat = {}\r\n                                }\r\n                            }\r\n                        })\r\n                        updateBoatSelected({})\r\n                    }\r\n                }\r\n            })\r\n        } else {//Add memebers back to member list\r\n            const newMemList = memberList.map(item => item)\r\n            selected.forEach(mem => {\r\n                if(!newMemList.includes(mem)){\r\n                    newMemList.push(mem)\r\n                }\r\n            })\r\n            updateMemberList(newMemList)\r\n            \r\n            if(Object.getOwnPropertyNames(boatSelected).length !== 0){\r\n                if(!boatList.includes(boatSelected)){\r\n                    const newBoatList = boatList.map(boat => boat)\r\n                    newBoatList.push(boatSelected)\r\n                    updateBoatList(newBoatList)\r\n                    my_crews.forEach(crew => {\r\n                        if(crew.id !== crew_id){\r\n                            if(crew.boat.name === boatSelected.name){\r\n                                crew.boat = {}\r\n                            }\r\n                        }\r\n                    })\r\n                    updateBoatSelected({})\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        //Get selected out of memberlist\r\n        selected.forEach(item => {\r\n            if (crew_id !== \"memList\") {\r\n                updateMemberList(prevState => prevState.filter(member => {\r\n                    return member !== item\r\n                }))\r\n            }\r\n            //Get selected out of crewlist by checking every crew list except the one you're\r\n            //trying to add to\r\n            my_crews.forEach(crew => {\r\n                if (crew.id !== crew_id) {\r\n                    var new_crew = []\r\n                    crew.members.forEach((member, i) => {\r\n                        if (!selected.includes(member)) {\r\n                            new_crew.push(member)\r\n                        }\r\n                    })\r\n                    crew.members = new_crew\r\n                }\r\n            })\r\n\r\n        })\r\n        \r\n        //Add selected to given crew\r\n        updateCrews(my_crews)\r\n\r\n        updateSelected([])\r\n        \r\n    }\r\n\r\n    function addCrew() {\r\n        const my_crews = crews.map(item => item)\r\n        my_crews.push({ id: my_crews.length + 1, members: [], boat: {} })\r\n        updateCrews(my_crews)\r\n    }\r\n\r\n    function saveCrews(){\r\n        const data_to_send = {training_id: props.training.id,crew: crews}\r\n        console.log(data_to_send)\r\n\r\n        fetch('/api/training/addcrews', {\r\n            method: \"POST\",\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(data_to_send)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => console.log(data))\r\n    }\r\n\r\n    return (\r\n        <div className=\"content-wrapper\">\r\n            <MemberList \r\n                        boats={boatList} \r\n                        members={memberList} \r\n                        memberclick={handleSelect} \r\n                        selected={selected} \r\n                        boatselected={boatSelected}\r\n                        listclick={addMembers} \r\n                        boatclick={boatSelect}\r\n                        savecrews={saveCrews}\r\n            />\r\n            \r\n            <CrewList \r\n                        crews={crews} \r\n                        callback={addMembers} \r\n                        memberclick={handleSelect} \r\n                        selected={selected} \r\n                        boatselected={boatSelected}\r\n                        addcrew={addCrew} \r\n                        boatclick={boatSelect}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CrewMaker"]},"metadata":{},"sourceType":"module"}